apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

group = 'expo.modules.dynamicappicon'
version = '0.1.0'

buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10"
  }
}

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
if (expoModulesCorePlugin.exists()) {
  apply from: expoModulesCorePlugin

  // Ensure the android block is available before applying the Kotlin plugin
  if (project.hasProperty('android')) {
    applyKotlinExpoModulesCorePlugin()
  } else {
    println("Hiii: Skipping applyKotlinExpoModulesCorePlugin since 'android' block is not available")
  }
}

// Helper to get properties from the root project
ext.safeExtGet = { prop, fallback ->
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

// Ensures backward compatibility
ext.getKotlinVersion = {
  if (ext.has("kotlinVersion")) {
    ext.kotlinVersion()
  } else {
    ext.safeExtGet("kotlinVersion", "1.8.10")
  }
}

android {
  namespace = "expo.modules.dynamicappicon"
  compileSdkVersion safeExtGet("compileSdkVersion", 33)

  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
  if (agpVersion.tokenize('.')[0].toInteger() < 8) {
    compileOptions {
      sourceCompatibility JavaVersion.VERSION_11
      targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
      jvmTarget = JavaVersion.VERSION_11.majorVersion
    }
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 34)
    versionCode 1
    versionName "0.1.0"
  }

  lintOptions {
    abortOnError false
  }

  publishing {
    singleVariant("release") {
      withSourcesJar()
    }
  }
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  implementation project(':expo-modules-core')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
}
